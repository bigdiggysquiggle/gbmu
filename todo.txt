figure out why the pc is ending up in vram with nothing actually written there for it to do
I suspect it has to do with why it's deciding it needs to access 0x60e0

reimplement stop command

ideally find a way to map several arrays into one super array
--seems entirely possible, tough part is managing IO masks
---echoed memory can be the same array put in twice

above seems doable by putting everything into a gameboy class
-still need to work out how to bit mask IO properly
--make i/oreg a class and define =operator?
---would need to do for vram too in order to handle modes

have save states first export cpu variables, then append with all the ram info from the mmu

verify whether or not mbc carts always have ram
--halt_bug.gb

instr_timing is borked

interrupt_time is borked

mem_timing is borked

oam_bug isn't preserved

implement sound

it seems that certain conditions don't get met properly
resulting in my emulator not properly following the cpu-instr
testrom

define the byte order in which each 16 bit instruction
performs its actions so that the emulator can run independent
of the system's endianness.

add interactive/step by step mode
add breakpoints
add mmu/vram viewing
